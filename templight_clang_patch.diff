diff --git a/include/clang/Driver/CC1Options.td b/include/clang/Driver/CC1Options.td
index 35475b4..ea79e98 100644
--- a/include/clang/Driver/CC1Options.td
+++ b/include/clang/Driver/CC1Options.td
@@ -473,6 +473,8 @@ def ast_list : Flag<["-"], "ast-list">,
   HelpText<"Build ASTs and print the list of declaration node qualified names">;
 def ast_dump : Flag<["-"], "ast-dump">,
   HelpText<"Build ASTs and then debug dump them">;
+def templight_dump : Flag<["-"], "templight-dump">,
+  HelpText<"Dump templight information to stdout">;
 def ast_dump_lookups : Flag<["-"], "ast-dump-lookups">,
   HelpText<"Build ASTs and then debug dump their name lookup tables">;
 def ast_view : Flag<["-"], "ast-view">,
diff --git a/include/clang/Frontend/FrontendActions.h b/include/clang/Frontend/FrontendActions.h
index 20fddc4..696e7c9 100644
--- a/include/clang/Frontend/FrontendActions.h
+++ b/include/clang/Frontend/FrontendActions.h
@@ -171,6 +171,14 @@ public:
   bool hasCodeCompletionSupport() const override { return false; }
 };
 
+class TemplightDumpAction : public ASTFrontendAction {
+protected:
+  std::unique_ptr<ASTConsumer> CreateASTConsumer(CompilerInstance &CI,
+                                                 StringRef InFile) override;
+
+  void ExecuteAction() override;
+};
+
 /**
  * \brief Frontend action adaptor that merges ASTs together.
  *
diff --git a/include/clang/Frontend/FrontendOptions.h b/include/clang/Frontend/FrontendOptions.h
index 9c960bb..9bfaa00 100644
--- a/include/clang/Frontend/FrontendOptions.h
+++ b/include/clang/Frontend/FrontendOptions.h
@@ -57,6 +57,7 @@ namespace frontend {
     RewriteObjC,            ///< ObjC->C Rewriter.
     RewriteTest,            ///< Rewriter playground
     RunAnalysis,            ///< Run one or more source code analyses.
+    TemplightDump,          ///< Dump template instantiations
     MigrateSource,          ///< Run migrator.
     RunPreprocessorOnly     ///< Just lex, no output.
   };
diff --git a/include/clang/FrontendTool/Utils.h b/include/clang/FrontendTool/Utils.h
index 031ee7d..766bcd3 100644
--- a/include/clang/FrontendTool/Utils.h
+++ b/include/clang/FrontendTool/Utils.h
@@ -15,9 +15,14 @@
 #ifndef LLVM_CLANG_FRONTENDTOOL_UTILS_H
 #define LLVM_CLANG_FRONTENDTOOL_UTILS_H
 
+#include <memory>
+
 namespace clang {
 
 class CompilerInstance;
+class FrontendAction;
+
+std::unique_ptr<FrontendAction> CreateFrontendAction(CompilerInstance &CI);
 
 /// ExecuteCompilerInvocation - Execute the given actions described by the
 /// compiler invocation object in the given compiler instance.
diff --git a/include/clang/Sema/ActiveTemplateInst.h b/include/clang/Sema/ActiveTemplateInst.h
new file mode 100644
index 0000000..95f132c
--- /dev/null
+++ b/include/clang/Sema/ActiveTemplateInst.h
@@ -0,0 +1,136 @@
+//===- ActiveTemplateInst.h - Active Template Instantiation Records - C++ -===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file defines the ActiveTemplateInstantiation class, which represents
+// a template instantiation during semantic analysis.
+//
+//===----------------------------------------------------------------------===//
+
+#ifndef LLVM_CLANG_ACTIVE_TEMPLATE_INST_H
+#define LLVM_CLANG_ACTIVE_TEMPLATE_INST_H
+
+#include "clang/Basic/SourceLocation.h"
+#include "llvm/ADT/ArrayRef.h"
+
+namespace clang {
+
+  class Decl;
+  class NamedDecl;
+  class TemplateArgument;
+
+namespace sema {
+  class TemplateDeductionInfo;
+}
+
+/// \brief A template instantiation that is currently in progress.
+class ActiveTemplateInstantiation {
+public:
+  /// \brief The kind of template instantiation we are performing
+  enum InstantiationKind {
+    /// We are instantiating a template declaration. The entity is
+    /// the declaration we're instantiating (e.g., a CXXRecordDecl).
+    TemplateInstantiation,
+
+    /// We are instantiating a default argument for a template
+    /// parameter. The Entity is the template, and
+    /// TemplateArgs/NumTemplateArguments provides the template
+    /// arguments as specified.
+    /// FIXME: Use a TemplateArgumentList
+    DefaultTemplateArgumentInstantiation,
+
+    /// We are instantiating a default argument for a function.
+    /// The Entity is the ParmVarDecl, and TemplateArgs/NumTemplateArgs
+    /// provides the template arguments as specified.
+    DefaultFunctionArgumentInstantiation,
+
+    /// We are substituting explicit template arguments provided for
+    /// a function template. The entity is a FunctionTemplateDecl.
+    ExplicitTemplateArgumentSubstitution,
+
+    /// We are substituting template argument determined as part of
+    /// template argument deduction for either a class template
+    /// partial specialization or a function template. The
+    /// Entity is either a ClassTemplatePartialSpecializationDecl or
+    /// a FunctionTemplateDecl.
+    DeducedTemplateArgumentSubstitution,
+
+    /// We are substituting prior template arguments into a new
+    /// template parameter. The template parameter itself is either a
+    /// NonTypeTemplateParmDecl or a TemplateTemplateParmDecl.
+    PriorTemplateArgumentSubstitution,
+
+    /// We are checking the validity of a default template argument that
+    /// has been used when naming a template-id.
+    DefaultTemplateArgumentChecking,
+
+    /// We are instantiating the exception specification for a function
+    /// template which was deferred until it was needed.
+    ExceptionSpecInstantiation,
+
+    /// Added for Template instantiation observation
+    /// Memoization means we are _not_ instantiating a template because
+    /// it is already instantiated (but we entered a context where we
+    /// would have had to if it was not already instantiated).
+    Memoization
+
+  } Kind;
+
+  /// \brief The point of instantiation within the source code.
+  SourceLocation PointOfInstantiation;
+
+  /// \brief The template (or partial specialization) in which we are
+  /// performing the instantiation, for substitutions of prior template
+  /// arguments.
+  NamedDecl *Template;
+
+  /// \brief The entity that is being instantiated.
+  Decl *Entity;
+
+  /// \brief The list of template arguments we are substituting, if they
+  /// are not part of the entity.
+  const TemplateArgument *TemplateArgs;
+
+  /// \brief The number of template arguments in TemplateArgs.
+  unsigned NumTemplateArgs;
+
+  ArrayRef<TemplateArgument> template_arguments() const {
+    return {TemplateArgs, NumTemplateArgs};
+  }
+
+  /// \brief The template deduction info object associated with the
+  /// substitution or checking of explicit or deduced template arguments.
+  sema::TemplateDeductionInfo *DeductionInfo;
+
+  /// \brief The source range that covers the construct that cause
+  /// the instantiation, e.g., the template-id that causes a class
+  /// template instantiation.
+  SourceRange InstantiationRange;
+
+  ActiveTemplateInstantiation()
+    : Kind(TemplateInstantiation), Template(nullptr), Entity(nullptr),
+      TemplateArgs(nullptr), NumTemplateArgs(0), DeductionInfo(nullptr) {}
+
+  /// \brief Determines whether this template is an actual instantiation
+  /// that should be counted toward the maximum instantiation depth.
+  bool isInstantiationRecord() const;
+
+};
+
+bool operator==(const ActiveTemplateInstantiation &X,
+                const ActiveTemplateInstantiation &Y);
+
+inline
+bool operator!=(const ActiveTemplateInstantiation &X,
+                const ActiveTemplateInstantiation &Y) {
+  return !(X == Y);
+}
+
+}
+
+#endif
diff --git a/include/clang/Sema/Sema.h b/include/clang/Sema/Sema.h
index d2e3f8c..07ffada 100644
--- a/include/clang/Sema/Sema.h
+++ b/include/clang/Sema/Sema.h
@@ -36,6 +36,7 @@
 #include "clang/Basic/Specifiers.h"
 #include "clang/Basic/TemplateKinds.h"
 #include "clang/Basic/TypeTraits.h"
+#include "clang/Sema/ActiveTemplateInst.h"
 #include "clang/Sema/AnalysisBasedWarnings.h"
 #include "clang/Sema/CleanupInfo.h"
 #include "clang/Sema/DeclSpec.h"
@@ -170,6 +171,7 @@ namespace clang {
   class TemplateArgumentList;
   class TemplateArgumentLoc;
   class TemplateDecl;
+  class TemplateInstantiationCallbacks;
   class TemplateParameterList;
   class TemplatePartialOrderingContext;
   class TemplateTemplateParmDecl;
@@ -6812,124 +6814,6 @@ public:
                                bool RelativeToPrimary = false,
                                const FunctionDecl *Pattern = nullptr);
 
-  /// \brief A template instantiation that is currently in progress.
-  struct ActiveTemplateInstantiation {
-    /// \brief The kind of template instantiation we are performing
-    enum InstantiationKind {
-      /// We are instantiating a template declaration. The entity is
-      /// the declaration we're instantiating (e.g., a CXXRecordDecl).
-      TemplateInstantiation,
-
-      /// We are instantiating a default argument for a template
-      /// parameter. The Entity is the template parameter whose argument is
-      /// being instantiated, the Template is the template, and the
-      /// TemplateArgs/NumTemplateArguments provide the template arguments as
-      /// specified.
-      DefaultTemplateArgumentInstantiation,
-
-      /// We are instantiating a default argument for a function.
-      /// The Entity is the ParmVarDecl, and TemplateArgs/NumTemplateArgs
-      /// provides the template arguments as specified.
-      DefaultFunctionArgumentInstantiation,
-
-      /// We are substituting explicit template arguments provided for
-      /// a function template. The entity is a FunctionTemplateDecl.
-      ExplicitTemplateArgumentSubstitution,
-
-      /// We are substituting template argument determined as part of
-      /// template argument deduction for either a class template
-      /// partial specialization or a function template. The
-      /// Entity is either a {Class|Var}TemplatePartialSpecializationDecl or
-      /// a TemplateDecl.
-      DeducedTemplateArgumentSubstitution,
-
-      /// We are substituting prior template arguments into a new
-      /// template parameter. The template parameter itself is either a
-      /// NonTypeTemplateParmDecl or a TemplateTemplateParmDecl.
-      PriorTemplateArgumentSubstitution,
-
-      /// We are checking the validity of a default template argument that
-      /// has been used when naming a template-id.
-      DefaultTemplateArgumentChecking,
-
-      /// We are instantiating the exception specification for a function
-      /// template which was deferred until it was needed.
-      ExceptionSpecInstantiation
-    } Kind;
-
-    /// \brief The point of instantiation within the source code.
-    SourceLocation PointOfInstantiation;
-
-    /// \brief The template (or partial specialization) in which we are
-    /// performing the instantiation, for substitutions of prior template
-    /// arguments.
-    NamedDecl *Template;
-
-    /// \brief The entity that is being instantiated.
-    Decl *Entity;
-
-    /// \brief The list of template arguments we are substituting, if they
-    /// are not part of the entity.
-    const TemplateArgument *TemplateArgs;
-
-    /// \brief The number of template arguments in TemplateArgs.
-    unsigned NumTemplateArgs;
-
-    ArrayRef<TemplateArgument> template_arguments() const {
-      return {TemplateArgs, NumTemplateArgs};
-    }
-
-    /// \brief The template deduction info object associated with the
-    /// substitution or checking of explicit or deduced template arguments.
-    sema::TemplateDeductionInfo *DeductionInfo;
-
-    /// \brief The source range that covers the construct that cause
-    /// the instantiation, e.g., the template-id that causes a class
-    /// template instantiation.
-    SourceRange InstantiationRange;
-
-    ActiveTemplateInstantiation()
-      : Kind(TemplateInstantiation), Template(nullptr), Entity(nullptr),
-        TemplateArgs(nullptr), NumTemplateArgs(0), DeductionInfo(nullptr) {}
-
-    /// \brief Determines whether this template is an actual instantiation
-    /// that should be counted toward the maximum instantiation depth.
-    bool isInstantiationRecord() const;
-
-    friend bool operator==(const ActiveTemplateInstantiation &X,
-                           const ActiveTemplateInstantiation &Y) {
-      if (X.Kind != Y.Kind)
-        return false;
-
-      if (X.Entity != Y.Entity)
-        return false;
-
-      switch (X.Kind) {
-      case TemplateInstantiation:
-      case ExceptionSpecInstantiation:
-        return true;
-
-      case PriorTemplateArgumentSubstitution:
-      case DefaultTemplateArgumentChecking:
-        return X.Template == Y.Template && X.TemplateArgs == Y.TemplateArgs;
-
-      case DefaultTemplateArgumentInstantiation:
-      case ExplicitTemplateArgumentSubstitution:
-      case DeducedTemplateArgumentSubstitution:
-      case DefaultFunctionArgumentInstantiation:
-        return X.TemplateArgs == Y.TemplateArgs;
-
-      }
-
-      llvm_unreachable("Invalid InstantiationKind!");
-    }
-
-    friend bool operator!=(const ActiveTemplateInstantiation &X,
-                           const ActiveTemplateInstantiation &Y) {
-      return !(X == Y);
-    }
-  };
-
   /// \brief List of active template instantiations.
   ///
   /// This vector is treated as a stack. As one template instantiation
@@ -6985,6 +6869,13 @@ public:
   /// to implement it anywhere else.
   ActiveTemplateInstantiation LastTemplateInstantiationErrorContext;
 
+  /// \brief The template instantiation callbacks to trace or track
+  /// instantiations (objects can be chained).
+  ///
+  /// This callbacks is used to print, trace or track template
+  /// instantiations as they are being constructed.
+  std::unique_ptr<TemplateInstantiationCallbacks> TemplateInstCallbacksChain;
+
   /// \brief The current index into pack expansion arguments that will be
   /// used for substitution of parameter packs.
   ///
diff --git a/include/clang/Sema/TemplateInstCallbacks.h b/include/clang/Sema/TemplateInstCallbacks.h
new file mode 100644
index 0000000..b111428
--- /dev/null
+++ b/include/clang/Sema/TemplateInstCallbacks.h
@@ -0,0 +1,96 @@
+//===- TemplateInstCallbacks.h - Template Instantiation Callbacks - C++ --===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===---------------------------------------------------------------------===//
+//
+// This file defines the TemplateInstantiationCallbacks class, which is the
+// base class for callbacks that will be notified at template instantiations.
+//
+//===---------------------------------------------------------------------===//
+
+#ifndef LLVM_CLANG_TEMPLATE_INST_CALLBACKS_H
+#define LLVM_CLANG_TEMPLATE_INST_CALLBACKS_H
+
+#include "clang/Basic/SourceLocation.h"
+
+#include "llvm/Support/Compiler.h"
+#include <memory>
+
+namespace clang {
+
+class ActiveTemplateInstantiation;
+class Sema;
+
+/// \brief This is a base class for callbacks that will be notified at every
+/// template instantiation.
+class TemplateInstantiationCallbacks {
+public:
+
+  /// \brief Called before doing AST-parsing.
+  void initialize(const Sema &TheSema) {
+    this->initializeImpl(TheSema);
+    if (NextCallbacks)
+      NextCallbacks->initialize(TheSema);
+  };
+
+  /// \brief Called after AST-parsing is completed.
+  void finalize(const Sema &TheSema) {
+    this->finalizeImpl(TheSema);
+    if (NextCallbacks)
+      NextCallbacks->finalize(TheSema);
+  };
+
+  /// \brief Called when instantiation of a template just began.
+  void atTemplateBegin(const Sema &TheSema,
+                       const ActiveTemplateInstantiation &Inst) {
+    this->atTemplateBeginImpl(TheSema, Inst);
+    if (NextCallbacks)
+      NextCallbacks->atTemplateBegin(TheSema, Inst);
+  };
+
+  /// \brief Called when instantiation of a template is just about to end.
+  void atTemplateEnd(const Sema &TheSema,
+                     const ActiveTemplateInstantiation &Inst) {
+    this->atTemplateEndImpl(TheSema, Inst);
+    if (NextCallbacks)
+      NextCallbacks->atTemplateEnd(TheSema, Inst);
+  };
+
+  virtual ~TemplateInstantiationCallbacks() { };
+
+  /// \brief Appends a new observer to the end of this list.
+  /// \note This function uses a tail-call recursion.
+  static void appendNewCallbacks(
+      std::unique_ptr<TemplateInstantiationCallbacks> &CurrentChain,
+      TemplateInstantiationCallbacks *NewCallbacks) {
+    if (!CurrentChain) {
+      CurrentChain.reset(NewCallbacks);
+      return;
+    };
+    appendNewCallbacks(CurrentChain->NextCallbacks, NewCallbacks);
+  };
+
+protected:
+
+  /// \brief Called before doing AST-parsing.
+  virtual void initializeImpl(const Sema &TheSema) { };
+  /// \brief Called after AST-parsing is completed.
+  virtual void finalizeImpl(const Sema &TheSema) { };
+
+  /// \brief Called when instantiation of a template just began.
+  virtual void atTemplateBeginImpl(const Sema &TheSema,
+                                   const ActiveTemplateInstantiation &Inst) {};
+  /// \brief Called when instantiation of a template is just about to end.
+  virtual void atTemplateEndImpl(const Sema &TheSema,
+                                 const ActiveTemplateInstantiation &Inst) {};
+
+  std::unique_ptr<TemplateInstantiationCallbacks> NextCallbacks;
+};
+
+}
+
+#endif
diff --git a/lib/Frontend/CompilerInvocation.cpp b/lib/Frontend/CompilerInvocation.cpp
index a8c1e61..ec53cae 100644
--- a/lib/Frontend/CompilerInvocation.cpp
+++ b/lib/Frontend/CompilerInvocation.cpp
@@ -1182,6 +1182,8 @@ static InputKind ParseFrontendArgs(FrontendOptions &Opts, ArgList &Args,
       Opts.ProgramAction = frontend::PrintPreamble; break;
     case OPT_E:
       Opts.ProgramAction = frontend::PrintPreprocessedInput; break;
+    case OPT_templight_dump:
+      Opts.ProgramAction = frontend::TemplightDump; break;
     case OPT_rewrite_macros:
       Opts.ProgramAction = frontend::RewriteMacros; break;
     case OPT_rewrite_objc:
@@ -2353,6 +2355,7 @@ static void ParsePreprocessorOutputArgs(PreprocessorOutputOptions &Opts,
   case frontend::RewriteObjC:
   case frontend::RewriteTest:
   case frontend::RunAnalysis:
+  case frontend::TemplightDump:
   case frontend::MigrateSource:
     Opts.ShowCPP = 0;
     break;
diff --git a/lib/Frontend/FrontendActions.cpp b/lib/Frontend/FrontendActions.cpp
index f795a1d..123ab86 100644
--- a/lib/Frontend/FrontendActions.cpp
+++ b/lib/Frontend/FrontendActions.cpp
@@ -18,12 +18,16 @@
 #include "clang/Lex/HeaderSearch.h"
 #include "clang/Lex/Preprocessor.h"
 #include "clang/Lex/PreprocessorOptions.h"
+#include "clang/Sema/Sema.h"
+#include "clang/Sema/TemplateInstCallbacks.h"
 #include "clang/Serialization/ASTReader.h"
 #include "clang/Serialization/ASTWriter.h"
 #include "llvm/Support/FileSystem.h"
 #include "llvm/Support/MemoryBuffer.h"
 #include "llvm/Support/Path.h"
 #include "llvm/Support/raw_ostream.h"
+#include "llvm/Support/YAMLTraits.h"
+#include <iostream>
 #include <memory>
 #include <system_error>
 
@@ -475,6 +479,144 @@ void VerifyPCHAction::ExecuteAction() {
 }
 
 namespace {
+  struct TemplightEntry
+  {
+    std::string Name;
+    std::string Kind;
+    std::string Event;
+    std::string PointOfInstantiation;
+  };
+}
+
+namespace llvm {
+namespace yaml {
+  template <>
+  struct MappingTraits<TemplightEntry> {
+    static void mapping(IO &io,
+      TemplightEntry &fields) {
+      io.mapRequired("name", fields.Name);
+      io.mapRequired("kind", fields.Kind);
+      io.mapRequired("event", fields.Event);
+      io.mapRequired("poi", fields.PointOfInstantiation);
+    }
+  };
+}
+}
+
+namespace {
+  class DefaultTemplateInstCallbacks : public TemplateInstantiationCallbacks {
+  protected:
+    virtual void atTemplateBeginImpl(const Sema &TheSema,
+      const ActiveTemplateInstantiation &Inst) override
+    {
+      DisplayTemplightEntry<true>(std::cout, TheSema, Inst);
+    }
+
+    virtual void atTemplateEndImpl(const Sema &TheSema,
+      const ActiveTemplateInstantiation &Inst) override
+    {
+      DisplayTemplightEntry<false>(std::cout, TheSema, Inst);
+    }
+  private:
+    static std::string ToString(
+      ActiveTemplateInstantiation::InstantiationKind Kind) {
+      switch (Kind) {
+      case ActiveTemplateInstantiation::TemplateInstantiation:
+        return "TemplateInstantiation";
+      case ActiveTemplateInstantiation::DefaultTemplateArgumentInstantiation:
+        return "DefaultTemplateArgumentInstantiation";
+      case ActiveTemplateInstantiation::DefaultFunctionArgumentInstantiation:
+        return "DefaultFunctionArgumentInstantiation";
+      case ActiveTemplateInstantiation::ExplicitTemplateArgumentSubstitution:
+        return "ExplicitTemplateArgumentSubstitution";
+      case ActiveTemplateInstantiation::DeducedTemplateArgumentSubstitution:
+        return "DeducedTemplateArgumentSubstitution";
+      case ActiveTemplateInstantiation::PriorTemplateArgumentSubstitution:
+        return "PriorTemplateArgumentSubstitution";
+      case ActiveTemplateInstantiation::DefaultTemplateArgumentChecking:
+        return "DefaultTemplateArgumentChecking";
+      case ActiveTemplateInstantiation::ExceptionSpecInstantiation:
+        return "ExceptionSpecInstantiation";
+      case ActiveTemplateInstantiation::Memoization:
+        return "Memoization";
+      }
+      return "";
+    }
+
+    template <bool BeginInstantiation>
+    static void DisplayTemplightEntry(std::ostream &Out, const Sema &TheSema,
+      const ActiveTemplateInstantiation &Inst)
+    {
+      std::string YAML;
+      {
+        llvm::raw_string_ostream OS(YAML);
+        llvm::yaml::Output YO(OS);
+        TemplightEntry Entry =
+          GetTemplightEntry<BeginInstantiation>(TheSema, Inst);
+        llvm::yaml::EmptyContext Context;
+        llvm::yaml::yamlize(YO, Entry, true, Context);
+      }
+      Out << "---" << YAML << "\n";
+    }
+
+    template <bool BeginInstantiation>
+    static TemplightEntry GetTemplightEntry(const Sema &TheSema,
+      const ActiveTemplateInstantiation &Inst)
+    {
+      TemplightEntry Entry;
+      Entry.Kind = ToString(Inst.Kind);
+      Entry.Event = BeginInstantiation ? "Begin" : "End";
+      if (NamedDecl* NamedTemplate = dyn_cast_or_null<NamedDecl>(Inst.Entity))
+      {
+        llvm::raw_string_ostream OS(Entry.Name);
+        NamedTemplate->getNameForDiagnostic(OS, TheSema.getLangOpts(), true);
+      }
+      const PresumedLoc Loc =
+        TheSema.getSourceManager().getPresumedLoc(Inst.PointOfInstantiation);
+      if (!Loc.isInvalid())
+      {
+        Entry.PointOfInstantiation =
+          std::string(Loc.getFilename())
+          + ":" + std::to_string(Loc.getLine())
+          + ":" + std::to_string(Loc.getColumn());
+      }
+      return Entry;
+    }
+  };
+}
+
+std::unique_ptr<ASTConsumer>
+TemplightDumpAction::CreateASTConsumer(CompilerInstance &CI, StringRef InFile) {
+  return llvm::make_unique<ASTConsumer>();
+}
+
+void TemplightDumpAction::ExecuteAction() {
+  CompilerInstance &CI = getCompilerInstance();
+
+  // This part is normally done by ASTFrontEndAction, but needs to happen
+  //  before Templight observers can be created ----------------------->>
+  // FIXME: Move the truncation aspect of this into Sema, we delayed this till
+  // here so the source manager would be initialized.
+  if (hasCodeCompletionSupport() &&
+      !CI.getFrontendOpts().CodeCompletionAt.FileName.empty())
+    CI.createCodeCompletionConsumer();
+
+  // Use a code completion consumer?
+  CodeCompleteConsumer *CompletionConsumer = nullptr;
+  if (CI.hasCodeCompletionConsumer())
+    CompletionConsumer = &CI.getCodeCompletionConsumer();
+
+  if (!CI.hasSema())
+    CI.createSema(getTranslationUnitKind(), CompletionConsumer);
+  //<<--------------------------------------------------------------
+
+  TemplateInstantiationCallbacks::appendNewCallbacks(
+    CI.getSema().TemplateInstCallbacksChain,
+    new DefaultTemplateInstCallbacks());
+  ASTFrontendAction::ExecuteAction();
+}
+
+namespace {
   /// \brief AST reader listener that dumps module information for a module
   /// file.
   class DumpModuleInfoListener : public ASTReaderListener {
diff --git a/lib/FrontendTool/ExecuteCompilerInvocation.cpp b/lib/FrontendTool/ExecuteCompilerInvocation.cpp
index 1f7493c..a3df77e 100644
--- a/lib/FrontendTool/ExecuteCompilerInvocation.cpp
+++ b/lib/FrontendTool/ExecuteCompilerInvocation.cpp
@@ -31,6 +31,8 @@
 using namespace clang;
 using namespace llvm::opt;
 
+namespace clang {
+
 static std::unique_ptr<FrontendAction>
 CreateFrontendBaseAction(CompilerInstance &CI) {
   using namespace clang::frontend;
@@ -62,6 +64,7 @@ CreateFrontendBaseAction(CompilerInstance &CI) {
   case ParseSyntaxOnly:        return llvm::make_unique<SyntaxOnlyAction>();
   case ModuleFileInfo:         return llvm::make_unique<DumpModuleInfoAction>();
   case VerifyPCH:              return llvm::make_unique<VerifyPCHAction>();
+  case TemplightDump:          return llvm::make_unique<TemplightDumpAction>();
 
   case PluginAction: {
     for (FrontendPluginRegistry::iterator it =
@@ -120,7 +123,7 @@ CreateFrontendBaseAction(CompilerInstance &CI) {
 #endif
 }
 
-static std::unique_ptr<FrontendAction>
+std::unique_ptr<FrontendAction>
 CreateFrontendAction(CompilerInstance &CI) {
   // Create the underlying action.
   std::unique_ptr<FrontendAction> Act = CreateFrontendBaseAction(CI);
@@ -171,7 +174,7 @@ CreateFrontendAction(CompilerInstance &CI) {
   return Act;
 }
 
-bool clang::ExecuteCompilerInvocation(CompilerInstance *Clang) {
+bool ExecuteCompilerInvocation(CompilerInstance *Clang) {
   // Honor -help.
   if (Clang->getFrontendOpts().ShowHelp) {
     std::unique_ptr<OptTable> Opts = driver::createDriverOptTable();
@@ -251,3 +254,5 @@ bool clang::ExecuteCompilerInvocation(CompilerInstance *Clang) {
     BuryPointer(std::move(Act));
   return Success;
 }
+
+}
diff --git a/lib/Parse/ParseAST.cpp b/lib/Parse/ParseAST.cpp
index d018d4c..e6dda16 100644
--- a/lib/Parse/ParseAST.cpp
+++ b/lib/Parse/ParseAST.cpp
@@ -21,6 +21,7 @@
 #include "clang/Sema/CodeCompleteConsumer.h"
 #include "clang/Sema/Sema.h"
 #include "clang/Sema/SemaConsumer.h"
+#include "clang/Sema/TemplateInstCallbacks.h"
 #include "llvm/Support/CrashRecoveryContext.h"
 #include <cstdio>
 #include <memory>
@@ -121,6 +122,11 @@ void clang::ParseAST(Sema &S, bool PrintStats, bool SkipFunctionBodies) {
   bool OldCollectStats = PrintStats;
   std::swap(OldCollectStats, S.CollectStats);
 
+  // Initialize the template instantiation observer chain.
+  // FIXME: See note on "finalize" below.
+  if (S.TemplateInstCallbacksChain)
+    S.TemplateInstCallbacksChain->initialize(S);
+
   ASTConsumer *Consumer = &S.getASTConsumer();
 
   std::unique_ptr<Parser> ParseOP(
@@ -158,6 +164,14 @@ void clang::ParseAST(Sema &S, bool PrintStats, bool SkipFunctionBodies) {
   
   Consumer->HandleTranslationUnit(S.getASTContext());
 
+  // Finalize the template instantiation observer chain.
+  // FIXME: This (and init.) should be done in the Sema class, but because 
+  // Sema does not have a reliable "Finalize" function (it has a 
+  // destructor, but it is not guaranteed to be called ("-disable-free")).
+  // So, do the initialization above and do the finalization here:
+  if (S.TemplateInstCallbacksChain)
+    S.TemplateInstCallbacksChain->finalize(S);
+
   std::swap(OldCollectStats, S.CollectStats);
   if (PrintStats) {
     llvm::errs() << "\nSTATISTICS:\n";
diff --git a/lib/Sema/ActiveTemplateInst.cpp b/lib/Sema/ActiveTemplateInst.cpp
new file mode 100644
index 0000000..50c1c14
--- /dev/null
+++ b/lib/Sema/ActiveTemplateInst.cpp
@@ -0,0 +1,74 @@
+//===--- ActiveTemplateInst.cpp - Active Template Instantiation Records ---===//
+//
+//                     The LLVM Compiler Infrastructure
+//
+// This file is distributed under the University of Illinois Open Source
+// License. See LICENSE.TXT for details.
+//
+//===----------------------------------------------------------------------===//
+//
+// This file implements basic operators on the class that represents active
+// template instantiations during semantic analysis.
+//
+//===----------------------------------------------------------------------===//
+
+#include "clang/Sema/ActiveTemplateInst.h"
+
+#include "llvm/Support/ErrorHandling.h"
+
+namespace clang {
+
+bool operator==(const ActiveTemplateInstantiation &X,
+                const ActiveTemplateInstantiation &Y) {
+  if (X.Kind != Y.Kind)
+    return false;
+
+  if (X.Entity != Y.Entity)
+    return false;
+
+  switch (X.Kind) {
+    case ActiveTemplateInstantiation::TemplateInstantiation:
+    case ActiveTemplateInstantiation::ExceptionSpecInstantiation:
+    case ActiveTemplateInstantiation::Memoization:
+      return true;
+
+    case ActiveTemplateInstantiation::PriorTemplateArgumentSubstitution:
+    case ActiveTemplateInstantiation::DefaultTemplateArgumentChecking:
+      return X.Template == Y.Template && X.TemplateArgs == Y.TemplateArgs;
+
+    case ActiveTemplateInstantiation::DefaultTemplateArgumentInstantiation:
+    case ActiveTemplateInstantiation::ExplicitTemplateArgumentSubstitution:
+    case ActiveTemplateInstantiation::DeducedTemplateArgumentSubstitution:
+    case ActiveTemplateInstantiation::DefaultFunctionArgumentInstantiation:
+      return X.TemplateArgs == Y.TemplateArgs;
+  }
+
+  llvm_unreachable("Invalid InstantiationKind!");
+}
+
+bool ActiveTemplateInstantiation::isInstantiationRecord() const {
+  switch (Kind) {
+    case TemplateInstantiation:
+    case ExceptionSpecInstantiation:
+    case DefaultTemplateArgumentInstantiation:
+    case DefaultFunctionArgumentInstantiation:
+    case ExplicitTemplateArgumentSubstitution:
+    case DeducedTemplateArgumentSubstitution:
+    case PriorTemplateArgumentSubstitution:
+      return true;
+
+    case DefaultTemplateArgumentChecking:
+      return false;
+
+    // FIXME Should this do a break or not?
+    // Memoization kind should never occur here, so, it doesn't really matter.
+    case Memoization:
+      break;
+  }
+
+  llvm_unreachable("Invalid InstantiationKind!");
+}
+
+
+}
+
diff --git a/lib/Sema/CMakeLists.txt b/lib/Sema/CMakeLists.txt
index 7a59732..b54f602 100644
--- a/lib/Sema/CMakeLists.txt
+++ b/lib/Sema/CMakeLists.txt
@@ -7,6 +7,7 @@ if (MSVC)
 endif()
 
 add_clang_library(clangSema
+  ActiveTemplateInst.cpp
   AnalysisBasedWarnings.cpp
   AttributeList.cpp
   CodeCompleteConsumer.cpp
diff --git a/lib/Sema/Sema.cpp b/lib/Sema/Sema.cpp
index 412f944..b3c964d 100644
--- a/lib/Sema/Sema.cpp
+++ b/lib/Sema/Sema.cpp
@@ -37,6 +37,7 @@
 #include "clang/Sema/SemaConsumer.h"
 #include "clang/Sema/SemaInternal.h"
 #include "clang/Sema/TemplateDeduction.h"
+#include "clang/Sema/TemplateInstCallbacks.h"
 #include "llvm/ADT/DenseMap.h"
 #include "llvm/ADT/SmallSet.h"
 using namespace clang;
diff --git a/lib/Sema/SemaTemplateInstantiate.cpp b/lib/Sema/SemaTemplateInstantiate.cpp
index 723a6c0..ef0bdde 100644
--- a/lib/Sema/SemaTemplateInstantiate.cpp
+++ b/lib/Sema/SemaTemplateInstantiate.cpp
@@ -25,6 +25,7 @@
 #include "clang/Sema/PrettyDeclStackTrace.h"
 #include "clang/Sema/Template.h"
 #include "clang/Sema/TemplateDeduction.h"
+#include "clang/Sema/TemplateInstCallbacks.h"
 
 using namespace clang;
 using namespace sema;
@@ -184,24 +185,6 @@ Sema::getTemplateInstantiationArgs(NamedDecl *D,
   return Result;
 }
 
-bool Sema::ActiveTemplateInstantiation::isInstantiationRecord() const {
-  switch (Kind) {
-  case TemplateInstantiation:
-  case ExceptionSpecInstantiation:
-  case DefaultTemplateArgumentInstantiation:
-  case DefaultFunctionArgumentInstantiation:
-  case ExplicitTemplateArgumentSubstitution:
-  case DeducedTemplateArgumentSubstitution:
-  case PriorTemplateArgumentSubstitution:
-    return true;
-
-  case DefaultTemplateArgumentChecking:
-    return false;
-  }
-
-  llvm_unreachable("Invalid InstantiationKind!");
-}
-
 Sema::InstantiatingTemplate::InstantiatingTemplate(
     Sema &SemaRef, ActiveTemplateInstantiation::InstantiationKind Kind,
     SourceLocation PointOfInstantiation, SourceRange InstantiationRange,
@@ -234,6 +217,8 @@ Sema::InstantiatingTemplate::InstantiatingTemplate(
              .second;
     SemaRef.InNonInstantiationSFINAEContext = false;
     SemaRef.ActiveTemplateInstantiations.push_back(Inst);
+    if (SemaRef.TemplateInstCallbacksChain)
+      SemaRef.TemplateInstCallbacksChain->atTemplateBegin(SemaRef, Inst);
     if (!Inst.isInstantiationRecord())
       ++SemaRef.NonInstantiationEntries;
   }
@@ -373,6 +358,10 @@ void Sema::InstantiatingTemplate::Clear() {
       SemaRef.InstantiatingSpecializations.erase(
           std::make_pair(Active.Entity, Active.Kind));
 
+    if (SemaRef.TemplateInstCallbacksChain)
+      SemaRef.TemplateInstCallbacksChain->atTemplateEnd(
+        SemaRef, SemaRef.ActiveTemplateInstantiations.back());
+
     SemaRef.ActiveTemplateInstantiations.pop_back();
     Invalid = true;
   }
@@ -597,6 +586,9 @@ void Sema::PrintInstantiationStack() {
         << cast<FunctionDecl>(Active->Entity)
         << Active->InstantiationRange;
       break;
+
+    case ActiveTemplateInstantiation::Memoization:
+      break;
     }
   }
 }
@@ -637,6 +629,9 @@ Optional<TemplateDeductionInfo *> Sema::isSFINAEContext() const {
       // or deduced template arguments, so SFINAE applies.
       assert(Active->DeductionInfo && "Missing deduction info pointer");
       return Active->DeductionInfo;
+
+    case ActiveTemplateInstantiation::Memoization:
+      break;
     }
   }
 
diff --git a/lib/Sema/SemaTemplateInstantiateDecl.cpp b/lib/Sema/SemaTemplateInstantiateDecl.cpp
index 46de4a1..854bf8d 100644
--- a/lib/Sema/SemaTemplateInstantiateDecl.cpp
+++ b/lib/Sema/SemaTemplateInstantiateDecl.cpp
@@ -23,6 +23,7 @@
 #include "clang/Sema/Lookup.h"
 #include "clang/Sema/PrettyDeclStackTrace.h"
 #include "clang/Sema/Template.h"
+#include "clang/Sema/TemplateInstCallbacks.h"
 
 using namespace clang;
 
@@ -3561,7 +3562,7 @@ TemplateDeclInstantiator::InitFunctionInstantiation(FunctionDecl *New,
   // into a template instantiation for this specific function template
   // specialization, which is not a SFINAE context, so that we diagnose any
   // further errors in the declaration itself.
-  typedef Sema::ActiveTemplateInstantiation ActiveInstType;
+  typedef ActiveTemplateInstantiation ActiveInstType;
   ActiveInstType &ActiveInst = SemaRef.ActiveTemplateInstantiations.back();
   if (ActiveInst.Kind == ActiveInstType::ExplicitTemplateArgumentSubstitution ||
       ActiveInst.Kind == ActiveInstType::DeducedTemplateArgumentSubstitution) {
@@ -3570,8 +3571,12 @@ TemplateDeclInstantiator::InitFunctionInstantiation(FunctionDecl *New,
       assert(FunTmpl->getTemplatedDecl() == Tmpl &&
              "Deduction from the wrong function template?");
       (void) FunTmpl;
+      if (SemaRef.TemplateInstCallbacksChain)
+        SemaRef.TemplateInstCallbacksChain->atTemplateEnd(SemaRef, ActiveInst);
       ActiveInst.Kind = ActiveInstType::TemplateInstantiation;
       ActiveInst.Entity = New;
+      if (SemaRef.TemplateInstCallbacksChain)
+        SemaRef.TemplateInstCallbacksChain->atTemplateBegin(SemaRef, ActiveInst);
     }
   }
 
diff --git a/lib/Sema/SemaType.cpp b/lib/Sema/SemaType.cpp
index 92a2ecc..18a0329 100644
--- a/lib/Sema/SemaType.cpp
+++ b/lib/Sema/SemaType.cpp
@@ -30,6 +30,7 @@
 #include "clang/Sema/ScopeInfo.h"
 #include "clang/Sema/SemaInternal.h"
 #include "clang/Sema/Template.h"
+#include "clang/Sema/TemplateInstCallbacks.h"
 #include "llvm/ADT/SmallPtrSet.h"
 #include "llvm/ADT/SmallString.h"
 #include "llvm/ADT/StringSwitch.h"
@@ -7217,6 +7218,14 @@ bool Sema::RequireCompleteTypeImpl(SourceLocation Loc, QualType T,
         diagnoseMissingImport(Loc, SuggestedDef, MissingImportKind::Definition,
                               /*Recover*/TreatAsComplete);
       return !TreatAsComplete;
+    } else if (Def && TemplateInstCallbacksChain) {
+      ActiveTemplateInstantiation TempInst;
+      TempInst.Kind = ActiveTemplateInstantiation::Memoization;
+      TempInst.Template = Def;
+      TempInst.Entity = Def;
+      TempInst.PointOfInstantiation = Loc;
+      TemplateInstCallbacksChain->atTemplateBegin(*this, TempInst);
+      TemplateInstCallbacksChain->atTemplateEnd(*this, TempInst);
     }
 
     return false;
diff --git a/test/Sema/templight-memoization.cpp b/test/Sema/templight-memoization.cpp
new file mode 100644
index 0000000..d79a4ad
--- /dev/null
+++ b/test/Sema/templight-memoization.cpp
@@ -0,0 +1,32 @@
+// RUN: %clang_cc1 -templight-dump %s 2>&1 | FileCheck %s
+
+template <class T>
+struct foo {};
+
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'foo<int>'$}}
+// CHECK: {{^kind:[ ]+TemplateInstantiation$}}
+// CHECK: {{^event:[ ]+Begin$}}
+// CHECK: {{^poi:[ ]+'.*templight-memoization.cpp:}}[[@LINE+6]]{{:10'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'foo<int>'$}}
+// CHECK: {{^kind:[ ]+TemplateInstantiation$}}
+// CHECK: {{^event:[ ]+End$}}
+// CHECK: {{^poi:[ ]+'.*templight-memoization.cpp:}}[[@LINE+1]]{{:10'$}}
+foo<int> x;
+
+// CHECK-LABEL: {{^---$}}
+// CHECK-LABEL: {{^---$}}
+
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'foo<int>'$}}
+// CHECK: {{^kind:[ ]+Memoization$}}
+// CHECK: {{^event:[ ]+Begin$}}
+// CHECK: {{^poi:[ ]+'.*templight-memoization.cpp:}}[[@LINE+6]]{{:10'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'foo<int>'$}}
+// CHECK: {{^kind:[ ]+Memoization$}}
+// CHECK: {{^event:[ ]+End$}}
+// CHECK: {{^poi:[ ]+'.*templight-memoization.cpp:}}[[@LINE+1]]{{:10'$}}
+foo<int> y;
+
diff --git a/test/Sema/templight-nested-memoization.cpp b/test/Sema/templight-nested-memoization.cpp
new file mode 100644
index 0000000..9c5b512
--- /dev/null
+++ b/test/Sema/templight-nested-memoization.cpp
@@ -0,0 +1,92 @@
+// RUN: %clang_cc1 -templight-dump %s 2>&1 | FileCheck %s
+
+template <int N>
+struct fib
+{
+  static const int value = fib<N-1>::value + fib<N-2>::value;
+};
+
+template <>
+struct fib<0>
+{
+  static const int value = 1;
+};
+
+template <>
+struct fib<1>
+{
+  static const int value = 1;
+};
+
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'fib<4>'$}}
+// CHECK: {{^kind:[ ]+TemplateInstantiation$}}
+// CHECK: {{^event:[ ]+Begin$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-memoization.cpp:}}[[@LINE+66]]{{:8'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'fib<3>'$}}
+// CHECK: {{^kind:[ ]+TemplateInstantiation$}}
+// CHECK: {{^event:[ ]+Begin$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-memoization.cpp:6:28'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'fib<2>'$}}
+// CHECK: {{^kind:[ ]+TemplateInstantiation$}}
+// CHECK: {{^event:[ ]+Begin$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-memoization.cpp:6:28'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'fib<1>'$}}
+// CHECK: {{^kind:[ ]+Memoization$}}
+// CHECK: {{^event:[ ]+Begin$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-memoization.cpp:6:28'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'fib<1>'$}}
+// CHECK: {{^kind:[ ]+Memoization$}}
+// CHECK: {{^event:[ ]+End$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-memoization.cpp:6:28'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'fib<0>'$}}
+// CHECK: {{^kind:[ ]+Memoization$}}
+// CHECK: {{^event:[ ]+Begin$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-memoization.cpp:6:46'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'fib<0>'$}}
+// CHECK: {{^kind:[ ]+Memoization$}}
+// CHECK: {{^event:[ ]+End$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-memoization.cpp:6:46'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'fib<2>'$}}
+// CHECK: {{^kind:[ ]+TemplateInstantiation$}}
+// CHECK: {{^event:[ ]+End$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-memoization.cpp:6:28'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'fib<1>'$}}
+// CHECK: {{^kind:[ ]+Memoization$}}
+// CHECK: {{^event:[ ]+Begin$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-memoization.cpp:6:46'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'fib<1>'$}}
+// CHECK: {{^kind:[ ]+Memoization$}}
+// CHECK: {{^event:[ ]+End$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-memoization.cpp:6:46'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'fib<3>'$}}
+// CHECK: {{^kind:[ ]+TemplateInstantiation$}}
+// CHECK: {{^event:[ ]+End$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-memoization.cpp:6:28'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'fib<2>'$}}
+// CHECK: {{^kind:[ ]+Memoization$}}
+// CHECK: {{^event:[ ]+Begin$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-memoization.cpp:6:46'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'fib<2>'$}}
+// CHECK: {{^kind:[ ]+Memoization$}}
+// CHECK: {{^event:[ ]+End$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-memoization.cpp:6:46'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'fib<4>'$}}
+// CHECK: {{^kind:[ ]+TemplateInstantiation$}}
+// CHECK: {{^event:[ ]+End$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-memoization.cpp:}}[[@LINE+1]]{{:8'$}}
+fib<4> x;
+
diff --git a/test/Sema/templight-nested-template-instantiation.cpp b/test/Sema/templight-nested-template-instantiation.cpp
new file mode 100644
index 0000000..1f84366
--- /dev/null
+++ b/test/Sema/templight-nested-template-instantiation.cpp
@@ -0,0 +1,40 @@
+// RUN: %clang_cc1 -templight-dump %s 2>&1 | FileCheck %s
+
+template <int N>
+struct foo : foo<N - 1> {};
+
+template <>
+struct foo<0> {};
+
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'foo<2>'$}}
+// CHECK: {{^kind:[ ]+TemplateInstantiation$}}
+// CHECK: {{^event:[ ]+Begin$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-template-instantiation.cpp:}}[[@LINE+26]]{{:8'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'foo<1>'$}}
+// CHECK: {{^kind:[ ]+TemplateInstantiation$}}
+// CHECK: {{^event:[ ]+Begin$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-template-instantiation.cpp:4:14'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'foo<0>'$}}
+// CHECK: {{^kind:[ ]+Memoization$}}
+// CHECK: {{^event:[ ]+Begin$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-template-instantiation.cpp:4:14'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'foo<0>'$}}
+// CHECK: {{^kind:[ ]+Memoization$}}
+// CHECK: {{^event:[ ]+End$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-template-instantiation.cpp:4:14'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'foo<1>'$}}
+// CHECK: {{^kind:[ ]+TemplateInstantiation$}}
+// CHECK: {{^event:[ ]+End$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-template-instantiation.cpp:4:14'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'foo<2>'$}}
+// CHECK: {{^kind:[ ]+TemplateInstantiation$}}
+// CHECK: {{^event:[ ]+End$}}
+// CHECK: {{^poi:[ ]+'.*templight-nested-template-instantiation.cpp:}}[[@LINE+1]]{{:8'$}}
+foo<2> x;
+
diff --git a/test/Sema/templight-one-instantiation.cpp b/test/Sema/templight-one-instantiation.cpp
new file mode 100644
index 0000000..6ee5db8
--- /dev/null
+++ b/test/Sema/templight-one-instantiation.cpp
@@ -0,0 +1,17 @@
+// RUN: %clang_cc1 -templight-dump %s 2>&1 | FileCheck %s
+
+template <class T>
+struct foo {};
+
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'foo<int>'$}}
+// CHECK: {{^kind:[ ]+TemplateInstantiation$}}
+// CHECK: {{^event:[ ]+Begin$}}
+// CHECK: {{^poi:[ ]+'.*templight-one-instantiation.cpp:}}[[@LINE+6]]{{:10'$}}
+// CHECK-LABEL: {{^---$}}
+// CHECK: {{^name:[ ]+'foo<int>'$}}
+// CHECK: {{^kind:[ ]+TemplateInstantiation$}}
+// CHECK: {{^event:[ ]+End$}}
+// CHECK: {{^poi:[ ]+'.*templight-one-instantiation.cpp:}}[[@LINE+1]]{{:10'$}}
+foo<int> x;
+
diff --git a/tools/CMakeLists.txt b/tools/CMakeLists.txt
index b0c97f0..414e819 100644
--- a/tools/CMakeLists.txt
+++ b/tools/CMakeLists.txt
@@ -7,6 +7,7 @@ add_clang_subdirectory(clang-format-vs)
 add_clang_subdirectory(clang-fuzzer)
 add_clang_subdirectory(clang-import-test)
 add_clang_subdirectory(clang-offload-bundler)
+add_clang_subdirectory(templight)
 
 add_clang_subdirectory(c-index-test)
 
